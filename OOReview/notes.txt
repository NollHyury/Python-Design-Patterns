O mundo da orientação apresenta o conceito de objetos que tem atributos e métodos com

Estes métodos são responsáveis pela manipulação dos atributos


Classes:
  - Ajudam os devs a representar entidades do mundo real;
  - Definem os objetos com atributos e comportamentos (métodos);
  - Classes possuem construtores (método especial) que proporcionam o estado inicial para os objetos;
  - Classes são como templates (modelos), portanto, podem ser facilmente reutilizadas;


Objetos:
  - Representam entidades no contexto da aplicação em desenvolvimento;
  - Entidades interagem entre si para resolver problemas do mundo real;

  Exemplo:
    - Pessoa é uma entidade e Carro também é uma entidade;
    - Pessoa dirige Carro para se deslocar de um lugar para outro;


Principais components da POO:
  - Encapsulamento;
  - Polimorfismo;
  - Herança;
  - Abstração;
  - Composição;

Encapsulamento:
  Quando falamos de encapsulamento queremos dizer que:
    - O comportamento de um ojeto permanece oculto para o mundo externo, ou os objetos mantêm suas informações de estado (atributos) como privadas
    - Os clientes não podem alterar o estado interno dos ojetos atuando diretamente em seus atributos; em vez disso estas altereções devem ser realizadas através dos médotos;
    - Em Python, o conceito de encapsulamento não é implícioto pois não existem palavas reservadas como public, private e protected necessárias para tratar este conceito,
    entretanto, por convenção "tornamos" a acessibilidade privada usando o prefixo __ (dunder / duplo underline) no nome do atributo ou método

Polimorfismo:
  O polimorfismo pode ser de dois tipos:
    - Um ojeto oferece diferents implementações de um método de acordo com o s parâmetros de entrada;
    - A mesma interface (implementação) pode ser usada por objetos de tipos diferentes

Herança:
  Usamos Herança para darmos mais flexibilidade às nossas classes e o poder de reutilização, além de:
  - A herança indica que uma classe deriva (extende) sua funcionalidade da classe-pai;
  - A herança permite que reutilizamos características e funcionalidades definidas na classe-pai;
  - A herança cira hierarquias por meio d erelacionamento entre objetos de diferentes classes;

  Em Python, diferente de outras linguagens, há suporte para herança múltipla, ou seja, podemos herdar de várias classes.

Abstração:
  Ao tratarmos de abstração estamos falando em simplificação:
  - A abstração oferece uma interface (implementação) simples aos clientes, por meio da qual eles podem interagir com os elementos do programa e utilizar os métodos que foram definidos
  - Abstraindo (simplificando) a complexidade do programa os clentes não precisam conhecer as implementações internas, bastando apenas executa-las

Composição:
  - A composição nos ajuda a combinar objetos ou classes em estruturas de dados ou implementações mais complexas;
  - Na composição, um objeto é usado para chamar/executar métodos de outras classes, disponibilizando assim, as funcionalidades básicas sem o uso de herança


Príncipios do Design de Software Orientado a Objetos

Princípio do aberto/fechado:
  Este principio determina que classes ou métodos devem estar abertos para extensão mas fechados para modificações.

  Isso significa que ao desenvolver nossa aplicação deveremos escrever nossas classes e métodos de forma genérica,
  de modo que sempre que sentirmos necessidade de estender o comportamento não precisaremos alterar a classe propriamente dia.

  AO invés disso uma extenção simples da classe deverá ajudar a implementar o novo comportamento.


Princípio da inversão de controle
  Este Princípio determina que módulos de alto nível não devem ser dependentes de módulos de baixo nível, pois ambos devem ser dependentes de abstrações.
  Os detalhes devem depender das abstrações e não o inverso.

  Ou seja quaisquer dos módulos não devem ser altamento dependentes um do outro. Eles devem estar desacoplados com uma camada de abstração entre eles.

  De forma simples, devmos evitar a dependência entre módulos, ou seja, eles devem ser independentes.

  Desta forma a complexidade/rigidez do sistema diminui e fica mais fácil lidar com dependências entre os módulos.


Princípio da segregação de interfaces
  Este princípio determina que clientes não devem ser forçados a depender de interfaces que não utilizam.

  Desta forma nós desenvolvedores, estaremos escrevendo boas interfaces escrevendo apenas métodos relacionados â funcionalidade para que não exista
  nenhum método não relacionado à interface, de forma que a classe dependente da interface tenha que implementá-lo desnecessáriamente.

  Por exemplo, uma interface Pizza não deveria ter um método chamado adiciona_frango() pois a classe PizzaVegana não deveria ser forçada a implementar este método.

  As vantagens deste princípio são:
    - Forçar os devs a escrever interfaces enxutas e a ter métodos que sejam específicos da interface;
    - Ajuda você a não encher as interfaces com métodos indesejados.


Princípio da responsabilidade única
  Este princípio determina que uma classe deve ter apenas um motivo para mudar.

  Segundo este princípio, quando desenvolvemos uma classe, ela deve cuidar bem de sua funcionalidade em particular.

  Se uma classe estiver tratando de duas funcionalidade, será melhor dividi-la

  Este princípio refere-se à funcionalidade como um motivo para mudança

  A vantagem deste principio é fazer com que nossas classes sejam objetivas e enxutas.


Princípio da substituição

  Este princípio determina que classes derivadas devem ser capazes de subtituir totalmente as classes-pai

  De forma simples, este princípio sugere que a classe derivada deve estar o mais próximo possível da classe-pai de modo que a classe derivada possa substituir
  a classe-pai sem qualquer modificação no código.



Padrões de criação:
  - Funcionam com base no modo como os objetos poder ser criados;
  - Isolam os detalhes da criação dos objetos;
  - O código é independente do tipo de objeto a ser criado;

  Um exemplo deste padrão é o Singleton

Padrões estruturais
  - Determinam o design da estrutura de objetos e classes;
  - O foco está em simplificar a estrutura e identificar o relacionamento entre classes e objetos;
  - São centrados em herança e composição de classes;

  Um exemplo deste padrão estrutural é o padrão Adapter;


Padrões comportamentais
  - Se preocupam com a interação entre os objetos e suas responsabilidades;
  - Os objetos devem ser capazes de interagir e , mesmo assim, devem ter baixo acoplamento;

  Um exemplo deste padrão comportamental é o padrão Observer.
